{"version":3,"sources":["components/card-item/card-item.component.tsx","components/cards-grid/cards-grid.component.tsx","components/scoreboard/scoreboard.component.tsx","shared/loading-spinner/loading-spinner.component.tsx","utilities/messages.ts","App.tsx","index.tsx"],"names":["CardItem","id","image","handleCardClick","className","onClick","src","alt","console","log","CardsGrid","cards","map","card","ScoreBoard","score","bestScore","LoadingSpinner","role","messages","App","useState","setBestScore","setCards","loading","setLoading","message","setMessage","setScore","touched","setTouched","useEffect","a","fetch","response","ok","Error","initCards","json","error","minifiedCards","url","push","playRound","includes","resetGame","prevState","sort","Math","random","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0UAEaA,EAAW,SAAC,GAAD,IACtBC,EADsB,EACtBA,GACAC,EAFsB,EAEtBA,MACAC,EAHsB,EAGtBA,gBAHsB,OAStB,qBAAKC,UAAU,gBAAf,SACE,sBACEA,UAAU,0EACVC,QAAS,WACPF,EAAgBF,IAHpB,UAME,qBAAKK,IAAKJ,EAAOK,IAAI,MAAMH,UAAU,oBAAoBC,QAAS,kBAAMG,QAAQC,IAAIR,MACpF,qBAAKG,UAAU,2BCdRM,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOR,EAAV,EAAUA,gBAAV,OACvB,qBAAKC,UAAU,4DAAf,SACGO,EAAMC,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,CAAwBX,MAAOW,EAAKX,MAAOD,GAAIY,EAAKZ,GAAIE,gBAAiBA,GAA1DU,EAAKZ,UCRba,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,UAAV,OACxB,sBAAKZ,UAAU,+DAAf,UACE,sBAAKA,UAAU,oFAAf,oBACUW,KAEV,sBAAKX,UAAU,4EAAf,yBACeY,SCNNC,EAAiB,kBAC5B,qBAAKb,UAAU,+BAA+Bc,KAAK,SAAnD,SACE,sBAAMd,UAAU,kBAAhB,2BCFSe,EAAqB,CAChC,oCACA,oCACA,2CACA,0BACA,qBACA,qBACA,qBACA,+BACA,sDCuEaC,MAtEf,WAEE,IAGA,EAAkCC,mBAAiB,GAAnD,mBAAOL,EAAP,KAAkBM,EAAlB,KACA,EAA0BD,mBAAkB,IAA5C,mBAAOV,EAAP,KAAcY,EAAd,KACA,EAA8BF,oBAAkB,GAAhD,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,mBAAiB,IAA/C,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA0BN,mBAAiB,GAA3C,mBAAON,EAAP,KAAca,EAAd,KACA,EAA8BP,mBAAmB,IAAjD,mBAAOQ,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACR,sBAAC,4BAAAC,EAAA,+EAE0BC,MAbT,gFAWjB,WAESC,EAFT,QAGiBC,GAHjB,sBAG2B,IAAIC,MAAM,wBAHrC,mBAIGb,EAJH,KAIYc,EAJZ,UAI4BH,EAASI,OAJrC,uDAKGb,GAAW,GACXE,EAAW,iDANd,kDAQGnB,QAAQ+B,MAAM,KAAEb,SARnB,yDAAD,KAWC,IAGH,IAAMW,EAAY,SAAC1B,GACjB,IAD4C,EACxC6B,EAAyB,GADe,cAEzB7B,GAFyB,IAE5C,2BAA0B,CAAC,IAAhBE,EAAe,QAChBZ,EAAYY,EAAZZ,GAAIwC,EAAQ5B,EAAR4B,IACZD,EAAcE,KAAK,CAAEzC,KAAIC,MAAOuC,KAJU,8BAO5C,OAAOD,GAOHG,EAAY,SAAC1C,GAQjB,OAPK4B,EAAQe,SAAS3C,GAKpB4C,KAJAf,GAAW,SAACgB,GAAD,4BAAmBA,GAAnB,CAA8B7C,OACzC2B,GAAS,SAACkB,GAAD,OAAeA,EAAY,KACpCnB,EAAWR,EAASJ,KAIf,YAAIJ,GAAOoC,MAAK,kBAAMC,KAAKC,SAAW,OAGzCJ,EAAY,WACZ9B,EAAQC,GACVM,EAAaP,GAEfa,EAAS,GACTE,EAAW,IACXH,EAAW,cAGb,OACE,sBAAKvB,UAAU,gBAAf,UACE,cAAC,EAAD,CAAYW,MAAOA,EAAOC,UAAWA,IACrC,qBAAKZ,UAAU,kBAAf,SAAkCsB,IACjCF,EAAU,cAAC,EAAD,IAAqB,cAAC,EAAD,CAAWb,MAAOA,EAAOR,gBA5BrC,SAACF,GACvBsB,EAASoB,EAAU1C,WC3CvBiD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4491e514.chunk.js","sourcesContent":["import './card-item.styles.scss';\r\n\r\nexport const CardItem = ({\r\n  id,\r\n  image,\r\n  handleCardClick,\r\n}: {\r\n  id: string;\r\n  image: string;\r\n  handleCardClick(id: string): void;\r\n}) => (\r\n  <div className=\"card-item col\">\r\n    <div\r\n      className=\"card border-2 border-primary mx-auto shadow-lg p-3 mb-5 bg-body rounded\"\r\n      onClick={() => {\r\n        handleCardClick(id);\r\n      }}\r\n    >\r\n      <img src={image} alt=\"cat\" className=\"img-fluid my-auto\" onClick={() => console.log(id)} />\r\n      <div className=\"card-img-overlay\"></div>\r\n    </div>\r\n  </div>\r\n);\r\n","import './cards-grid.styles.scss';\r\n\r\nimport { ICard } from '../../utilities/interfaces';\r\nimport { CardItem } from '../card-item/card-item.component';\r\n\r\nexport const CardsGrid = ({ cards, handleCardClick }: { cards: ICard[]; handleCardClick(id: string): void }) => (\r\n  <div className=\"cards-grid row row-cols-1 row-cols-sm-2 row-cols-md-3 g-2\">\r\n    {cards.map((card) => (\r\n      <CardItem key={card.id} image={card.image} id={card.id} handleCardClick={handleCardClick} />\r\n    ))}\r\n  </div>\r\n);\r\n","export const ScoreBoard = ({ score, bestScore }: { score: number; bestScore: number }) => (\r\n  <div className=\"scoreboard container row my-4 mx-auto justify-content-around\">\r\n    <div className=\"score col-md-4 col-sm-6 col-8 p-2 rounded-pill bg-primary text-light my-1 my-sm-0\">\r\n      Score: {score}\r\n    </div>\r\n    <div className=\"best-score col-sm-6 col-md-4 col-8 p-2 rounded-pill bg-primary text-light\">\r\n      Best score: {bestScore}\r\n    </div>\r\n  </div>\r\n);\r\n","export const LoadingSpinner = () => (\r\n  <div className=\"spinner-grow spinner-grow-lg\" role=\"status\">\r\n    <span className=\"visually-hidden\">Loading...</span>\r\n  </div>\r\n);\r\n","export const messages: string[] = [\r\n  'REMEMBER NOT TO TOUCH A CAT TWICE',\r\n  'REMEMBER NOT TO TOUCH A CAT TWICE',\r\n  'IF YOU TOUCH THE BEANS YOU GET THE MEANS',\r\n  'LOOK AT THEM, SO FLUFFY',\r\n  'YOU GOT THIS HUMAN',\r\n  'YOU GOT THIS HUMAN',\r\n  'YOU GOT THIS HUMAN',\r\n  'YOU ARE PURRING SO DAMN GOOD',\r\n  'GREAT! YOU TOUCHED EVERYCAT WITHOUT BEING MURDERED',\r\n];\r\n","import { useEffect, useState } from 'react';\n\nimport './App.css';\n\nimport { Cats, ICard } from './utilities/interfaces';\nimport { CardsGrid } from './components/cards-grid/cards-grid.component';\nimport { ScoreBoard } from './components/scoreboard/scoreboard.component';\nimport { LoadingSpinner } from './shared/loading-spinner/loading-spinner.component';\nimport { messages } from './utilities/messages';\n\nfunction App() {\n  // * The Cat API\n  const apiUrl: string = `https://api.thecatapi.com/v1/images/search?size=small&limit=9&mime_types=jpg`;\n\n  // * Hooks\n  const [bestScore, setBestScore] = useState<number>(0);\n  const [cards, setCards] = useState<ICard[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [message, setMessage] = useState<string>('');\n  const [score, setScore] = useState<number>(0);\n  const [touched, setTouched] = useState<string[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const response = await fetch(apiUrl);\n        if (!response.ok) throw new Error('Couldnt find the url');\n        setCards(initCards(await response.json()));\n        setLoading(false);\n        setMessage('TOUCH A CAT TO START. CAREFUL WITH THE BELLY!');\n      } catch (e) {\n        console.error(e.message);\n      }\n    })();\n  }, []);\n\n  // * Game functions\n  const initCards = (cards: Cats[]): ICard[] => {\n    let minifiedCards: ICard[] = [];\n    for (const card of cards) {\n      const { id, url } = card;\n      minifiedCards.push({ id, image: url });\n    }\n\n    return minifiedCards;\n  };\n\n  const handleCardClick = (id: string): void => {\n    setCards(playRound(id));\n  };\n\n  const playRound = (id: string): ICard[] => {\n    if (!touched.includes(id)) {\n      setTouched((prevState) => [...prevState, id]);\n      setScore((prevState) => prevState + 1);\n      setMessage(messages[score]);\n    } else {\n      resetGame();\n    }\n    return [...cards].sort(() => Math.random() - 0.5);\n  };\n\n  const resetGame = () => {\n    if (score > bestScore) {\n      setBestScore(score);\n    }\n    setScore(0);\n    setTouched([]);\n    setMessage('GAME OVER');\n  };\n\n  return (\n    <div className=\"App container\">\n      <ScoreBoard score={score} bestScore={bestScore} />\n      <div className=\"text-muted my-3\">{message}</div>\n      {loading ? <LoadingSpinner /> : <CardsGrid cards={cards} handleCardClick={handleCardClick} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}